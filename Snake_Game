# author SryMkr
# date 2021.1.14
# first version of Snake English Game


# import packages
from MyGame.Snake_food_library import *
from MyGame.Snake_body_library import *
from MyGame.Snake_head_library import *
import sys


# tip
words_list = ['HORSE', 'BULL', 'COW', 'SHEEP', 'ZEBRA',
              'DEER', 'CAT', 'LION', 'TIGER', 'DOG', 'FOX', 'SQUIRREL',
              'GORILLA', 'PEACOCK', 'SWAN', 'OSTRICH',
              'WOODPECK', 'LIZARD', 'TOAD', 'WEASEL']

# Chinese tasks
task_words = ["马","公牛","奶牛","羊","斑马","鹿","猫","狮子","老虎"
              ,"狗","狐狸","松鼠","大猩猩","孔雀","天鹅","鸵鸟","啄木鸟"
              ,"蜥蜴","蟾蜍","黄鼠狼"]
# alphabet
alphabet_list = ['A','B','C','D','E','F','G','H','I','J','K','L'
                 ,'M','N','O','P','Q','R','S','T','U','V','W','X'
                 ,'Y','Z']

# get sequence correct alphabet
continuous_correct_alphabet = words(words_list, alphabet_list)

# add correct  alphabet
class Snakebody_alphabet(MySprite_food):
    def __init__(self,frame_nuber):
        MySprite_food.__init__(self)
        self.load_multi_frames("Game_Pictures/NEW_AL1.png", 30, 30, 13)
        self.draw_current_frame(frame_nuber)

# add wrong alphabet
class wrong_alphabet(MySprite_food):
    def __init__(self,frame_nuber):
        MySprite_food.__init__(self)
        self.load_multi_frames("Game_Pictures/NEW_AL2.png", 30, 30, 13)
        self.draw_current_frame(frame_nuber)

# initial
def game_init():
    # global variate
    global screen,font,timer,snake,alphabet_group,\
        alphabet,random_alphabet,random_alphabet_group,\
        tip_group,tip

    # initialize some modules
    pygame.init()
    # set the width and height of window
    # it seems like a drawing board
    screen = pygame.display.set_mode((30 * 24, 30 * 24))
    # set screen caption
    pygame.display.set_caption("Snake English")
    # font
    font = pygame.font.SysFont('华文楷体', 36)
    # game clock
    timer = pygame.time.Clock()
    # initialize snake
    snake = Snake_body_Sprite()
    snake.creat_snake()

    # correct alphabet sprite
    alphabet_group = pygame.sprite.Group()
    alphabet = MySprite_food()
    alphabet.load_multi_frames("Game_Pictures/NEW_AL1.png", 30, 30, 13)
    alphabet_group.add(alphabet)

    # wrong alphabet sprite
    random_alphabet_group = pygame.sprite.Group()
    random_alphabet = MySprite_food()
    random_alphabet.load_multi_frames("Game_Pictures/NEW_AL1.png", 30, 30, 13)
    random_alphabet_group.add(random_alphabet)

    # create tip sprite
    tip_group = pygame.sprite.Group()
    tip = MySprite_food()
    tip.load_multi_frames("Game_Pictures/health.png", 30, 30, 1)
    tip_group.add(tip)

# other constant
game_init()
# game_over switch
game_over = False
# pause and play switch
pause = False
# conflict switch
food_snake_conflict = False
count = 0
# record score
current_score = 0

# define pause and continue game
def checkquit(events):
    global pause
    for event in events:
        if event.type == pygame.QUIT:
            # record highest score and words
            save_record('saved_files/highest_words', highest_words)
            save_record('saved_files/highest_score', highest_score)
            sys.exit(0)
    keys_two = pygame.key.get_pressed()
    if keys_two[K_ESCAPE]:
        save_record('saved_files/highest_words', highest_words)
        save_record('saved_files/highest_score', highest_score)
        sys.exit(0)
    elif keys_two[K_p]:
            pause = False
    elif keys_two[K_SPACE]:
            pause = True

while True:

    # how many frames in 1S
    timer.tick(200)
    # update drawing paper every loop
    # it seems like replace the last picture with new picture
    screen.fill((255, 255, 255))
    # the total time of gameplay
    gameplay_time = pygame.time.get_ticks()

    # load record
    highest_score = load_record('saved_files/highest_score')
    highest_words = load_record('saved_files/highest_words')

    # update records
    if current_score > int(highest_score):
        highest_score = current_score
    if int(alphabet.current_word_number)-1 > int(highest_words):
        highest_words = int(alphabet.current_word_number)-1

    # get kinds of events
    events = pygame.event.get()
    checkquit(events)

    # if pause show
    if pause:
        print_text(font,250,300,'Game Suspended')
        print_text(font, 220, 400, 'Please press P to start')
    else:
        # get held keys
        keys = pygame.key.get_pressed()
        # control the direction of snake
        if keys[K_UP] or keys[K_w]:
            snake.velocity = two_variate(0,-1)
        elif keys[K_DOWN] or keys[K_d]:
            snake.velocity = two_variate(0,1)
        elif keys[K_LEFT] or keys[K_a]:
            snake.velocity = two_variate(-1,0)
        elif keys[K_RIGHT] or keys[K_d]:
            snake.velocity = two_variate(1,0)

        # control head
        snake_head_direction(snake, snake.velocity)
        if snake.snake_head.current_frame < snake.snake_head.first_frame:
            snake.snake_head.current_frame = snake.snake_head.first_frame
        snake.snake_head.head_update(gameplay_time, 100)

        # if not game over
        if not game_over:
            # whether food positions conflict with snake
            while not food_snake_conflict:
            # get the position of three sprires
                x_position_list, y_position_list = food_random_postion()
                food_position,snake_position = snake.snake_position(x_position_list,y_position_list)

                for i in food_position:
                    # if not go on
                    if i not in snake_position:
                        count += 1
                    # if so, get new position
                    else:
                        count = 0
                        break
                # all are not conflict the pass
                if count ==3:
                    food_snake_conflict = True
            # reset
            food_snake_conflict = False
            count = 0

            # snake moving
            snake.snake_moving(gameplay_time)

            # all food update and keep
            tip.tip_update(1,0,x_position_list,y_position_list)
            alphabet.target_update(continuous_correct_alphabet, 1, 0, x_position_list, y_position_list)
            random_alphabet.random_update(alphabet.current_frame, 1,0, x_position_list,y_position_list)

            #   if eat correct food
            if len(pygame.sprite.spritecollide(snake.segments[0], alphabet_group, False))>0:
                # create a new sprite
                current_frame = alphabet.current_frame
                a = Snakebody_alphabet(current_frame)
                # add to snake tail
                snake.add_segment(a)
                # food update
                alphabet.target_update(continuous_correct_alphabet, gameplay_time + 1, 1, x_position_list, y_position_list)
                random_alphabet.random_update(alphabet.current_frame,gameplay_time + 1, 1, x_position_list,y_position_list)
                # score plus 10
                current_score +=10

            #   if eat wrong food
            elif len(pygame.sprite.spritecollide(snake.segments[0], random_alphabet_group, False, False))>0:
                random_frame = random_alphabet.random_frame
                b = wrong_alphabet(random_frame)
                snake.add_segment(b)
                random_alphabet.random_update(alphabet.current_frame,gameplay_time + 10, 10, x_position_list,y_position_list)  # 当蛇碰到了提示的时候，叫展示答案
                current_score -= 10

            #   if eat wrong tip
            if len(pygame.sprite.groupcollide(snake.segments, tip_group, False, False)) > 0:
                # print tip until snake tail
                print_text(font, 30 * 16, 40,
                       "答案: " + alphabet.current_word_number +
                       words_list[int(alphabet.current_word_number) - 1],
                       color=(255, 0, 0))
                # once snake tail leave tip
                if len(pygame.sprite.spritecollide(snake.segments[-1], tip_group, False, False))>0:
                        # score -30
                        current_score -= 30
                        # tip update
                        tip.tip_update(gameplay_time + 100, 100, x_position_list, y_position_list)

            # Snake dead once contact itself
            for n in range(1, len(snake.segments)):
                if pygame.sprite.collide_rect(snake.segments[0], snake.segments[n]):
                    game_over = True  # 撞到墙结束
                    save_record('saved_files/highest_words', highest_words)
                    save_record('saved_files/highest_score', highest_score)

            # Snake dead once contact walls
            x = snake.segments[0].x_coordinate // 30
            y = snake.segments[0].y_coordinate // 30
            if x < 0 or x > 24 or y < 6 or y > 24:
                game_over = True
                save_record('saved_files/highest_words', highest_words)
                save_record('saved_files/highest_score', highest_score)

    # fi game over
    if game_over ==True:
        # get drawing paper
        backbuffer = pygame.Surface((screen.get_rect().width,
                                     screen.get_rect().height))
        backbuffer.fill((255,0,0))
        screen.blit(backbuffer, (0, 0))
        # print results
        print_text(font, 30*9, 30*11, "Game Over")
        print_text(font, 30 * 9, 0, "本轮完成: " + str(int(alphabet.current_word_number) - 1))
        print_text(font, 0, 0, "本轮得分: " + str(current_score))

        # located positions
        study_x = 0
        study_y = 120
        # 展示本轮学会的单词
        print_text(font, 0, 60, "本轮学习到的单词如下：")
        print_result(font, study_x, study_y, words_list[0:int(alphabet.current_word_number) - 1])

    # print current state
    else:
        print_text(font, 30*15, 0, "当前任务: " +
            task_words[int(alphabet.current_word_number)-1])
        print_text(font, 0, 0, "当前得分: " + str(current_score))
        print_text(font, 30*9, 0, "已完成: " + str(int(alphabet.current_word_number)-1))
        print_text(font, 30*9, 30*2, "总任务: " + str(len(words_list)))
        print_text(font, 0, 30*2, "最高分数: " + str(highest_score))
        print_text(font, 0, 30 * 4, "单词记录: " + str(highest_words))

    # draw all sprites
        pygame.draw.line(screen,(0,0,0),(0,30*6),(30*24,30*6),2)
        snake.draw(screen)
        random_alphabet_group.draw(screen)
        alphabet_group.draw(screen)
        tip_group.draw(screen)

    # draw all sprites
    pygame.display.update()















